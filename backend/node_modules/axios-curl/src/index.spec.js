import fs from 'fs';
import path from 'path';
import expect from 'expect';
import { describe, it } from 'jesm';
import FormData from 'form-data';
import axios from 'axios';
import AxiosMock from 'axios-mock-adapter';
import axiosCurl from './index.js';

axiosCurl(axios);

const axiosMock = new AxiosMock(axios);
axiosMock.onGet('https://google.com').reply(200, null).onPost('https://google.com').reply(200, null).onAny().passThrough();

describe('axiosCurl', () => {
  it('test 1', async () => {
    const {
      config: { curl },
    } = await axios.get('https://google.com');

    expect(curl).toEqual("curl -X GET 'https://google.com'");
  });

  it('test 2', async () => {
    const {
      config: { curl },
    } = await axios.get('https://google.com', { params: { a: 1, b: 2 } });

    expect(curl).toEqual("curl -X GET 'https://google.com?a=1&b=2'");
  });

  it('test 3', async () => {
    const {
      config: { curl },
    } = await axios.get('https://google.com', { params: 'a=1&b=2' });

    expect(curl).toEqual("curl -X GET 'https://google.com?a=1&b=2'");
  });

  it.skip('test 4', async () => {
    const {
      config: { curl },
    } = await axios.get('https://google.com', {
      timeout: 3000,
      auth: {
        username: 'johndoe',
        password: 'secret',
      },
    });

    expect(curl).toEqual("curl -X GET 'https://google.com' -u 'johndoe:secret' -m 3");
  });

  it('test 5', async () => {
    const {
      config: { curl },
    } = await axios.post('https://google.com');

    expect(curl).toEqual("curl -X POST 'https://google.com'");
  });

  it('test 6', async () => {
    const {
      config: { curl },
    } = await axios.post('https://google.com', { a: 1, b: 2 });

    expect(curl).toEqual(`curl -X POST 'https://google.com' -H 'Content-Type: application/json;charset=utf-8' -d '{"a":1,"b":2}'`);
  });

  it('test 7', async () => {
    const {
      config: { curl },
    } = await axios.post('https://google.com', 'a=1&b=2');

    expect(curl).toEqual(`curl -X POST 'https://google.com' -H 'Content-Type: application/x-www-form-urlencoded' -d 'a=1&b=2'`);
  });

  it('test 8', async () => {
    const {
      config: { curl },
    } = await axios.post(
      'https://google.com',
      { a: 1, b: 2 },
      {
        headers: {
          x: 1,
          y: 2,
        },
      }
    );

    expect(curl).toEqual(`curl -X POST 'https://google.com' -H 'Content-Type: application/json;charset=utf-8' -H 'x: 1' -H 'y: 2' -d '{"a":1,"b":2}'`);
  });

  it('test 9', async () => {
    const {
      config: { curl },
    } = await axios.post(
      'https://google.com',
      { a: 1, b: 2 },
      {
        headers: {
          x: 1,
          y: 2,
        },
      }
    );

    //tofix, json here
    expect(curl).toEqual(`curl -X POST 'https://google.com' -H 'Content-Type: application/json;charset=utf-8' -H 'x: 1' -H 'y: 2' -d '{"a":1,"b":2}'`);
  });

  it.skip('test 10', async () => {
    const stream = fs.createReadStream('./index.js');
    const abspath = path.resolve('./index.js');

    const data = new FormData();
    data.append('a', 1);
    data.append('b', true);
    data.append('file', stream);
    const headers = data.getHeaders();

    const {
      config: { curl },
    } = await axios.post('https://google.com', data, { headers });

    expect(curl).toEqual(`curl -X POST "https://google.com" -F 'a=1' -F 'b=true' -F 'file=@"${abspath}"'`);
  });
});
